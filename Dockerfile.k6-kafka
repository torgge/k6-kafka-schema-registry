# Builder stage
FROM golang:1.24.4-alpine3.22 AS builder

USER root

# Install git for xk6 (it might use git to clone extension repos)
RUN apk update && apk upgrade && apk add --no-cache git

# Install xk6 itself
RUN go install go.k6.io/xk6/cmd/xk6@latest

WORKDIR /build

# Build k6 with all desired extensions in a single command
# NOTE: github.com/grafana/xk6-amqp is archived and removed from this example.
RUN xk6 build \
    --with github.com/grafana/xk6-sql@latest \
    --with github.com/grafana/xk6-sql-driver-postgres@latest \
    --with github.com/mostafa/xk6-kafka@latest \
    --with github.com/grafana/xk6-amqp@latest \
    --with github.com/grafana/xk6-dashboard@latest

# Final image
FROM alpine:3.21

# Install ca-certificates for secure connections (HTTPS, etc.)
RUN apk add --no-cache ca-certificates

# Copy the built k6 binary from the builder stage
COPY --from=builder /build/k6 /usr/bin/k6

# Set environment variables for the K6 script (these are defaults, can be overridden by docker-compose)
ENV PG_HOST=postgres
ENV PG_PORT=5432
ENV PG_USER=myuser
# Do not set PG_PASSWORD here; pass it securely at runtime via environment variables or Docker secrets
ENV PG_DATABASE=mydatabase
ENV KAFKA_BROKER=kafka:9092
ENV KAFKA_TOPIC=mytopic
ENV KAFKA_GROUP_ID=mygroup
ENV KAFKA_CLIENT_ID=myclient
ENV SCHEMA_REGISTRY_URL=http://schema-registry:8081

# Create the directory for results and set its permissions
RUN mkdir -p /k6/results && chmod a+rwx /k6/results
RUN mkdir -p /k6/schemas && chmod a+rwx /k6/schemas
RUN mkdir -p /k6/infra && chmod a+rwx /k6/infra
RUN mkdir -p /k6/utils && chmod a+rwx /k6/utils

# Copy the k6 script into the container
COPY ./k6/kafka/schemas/*.avsc /k6/schemas/
COPY ./k6/kafka/k6-kafka.js /k6/k6-script.js
COPY ./k6/kafka/infra/kafka-config.js /k6/infra/kafka-config.js
COPY ./k6/kafka/utils/ /k6/utils/

WORKDIR /k6

# Declare the volume for results
VOLUME ["/results"]

# Set the entrypoint to the k6 binary
ENTRYPOINT ["k6"]

# Set the default command if none is provided (e.g., for `docker run my-k6-image`)
CMD ["run", "extensions", "list"]

# Expose any necessary ports (e.g., for Prometheus metrics or web UI if enabled)
EXPOSE 6566
EXPOSE 5665

# Healthcheck (consider if your test is short-lived, otherwise this might fail before test finishes)
HEALTHCHECK --interval=30s --timeout=60s --start-period=5s --retries=3 CMD k6 status || exit 1

# Metadata for image
LABEL description="K6 performance testing image with SQL (PostgreSQL) and Kafka extensions."
